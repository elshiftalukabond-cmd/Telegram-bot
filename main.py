import os
import requests
from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, ConversationHandler, ContextTypes
)
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
SHEET_URL = os.getenv("SHEET_URL")

(
    LANGUAGE,
    NAME, SURNAME, AGE,
    POSITION, LOCATION, PHONE,
    PREV_JOB, PREV_SALARY, EXPECTED_SALARY,
    HARDWORK, MATH, MOTIVATION,
    START_DATE
) = range(14)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("O‚Äòzbek (Lotin)"), KeyboardButton("–é–∑–±–µ–∫ (–ö–∏—Ä–∏–ª)")]
    ]
    # Dastlabki xabar ‚Äî Elshift haqida ma‚Äôlumot
    text = (
        "Elshift ‚Äì binolaringiz uchun zamonaviy yechim! Uy, ofis va binolar uchun Alucabond xizmati.\n"
        "12 yillik tajriba, 20 dan ortiq mutaxassislar.\n\n"
        "Tilni tanlang / –¢–∏–ª–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:"
    )
    await update.message.reply_text(
        text,
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True),
    )
    return LANGUAGE


async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sel = update.message.text.strip()
    if sel == "O‚Äòzbek (Lotin)":
        context.user_data["lang"] = "uz"
        await update.message.reply_text(
            "üëã Assalomu alaykum! Siz **ELSHIFT** jamoasiga murojaat qilyapsiz.\n"
            "Ismingizni kiriting:", reply_markup=ReplyKeyboardRemove()
        )
    else:
        context.user_data["lang"] = "kr"
        await update.message.reply_text(
            "üëã –ê—Å—Å–∞–ª–æ–º—É –∞–ª–∞–π–∫—É–º! –°–∏–∑ **ELSHIFT** –∂–∞–º–æ–∞—Å–∏–≥–∞ –º—É—Ä–æ–∂–∞–∞—Ç “õ–∏–ª—è–ø—Å–∏–∑.\n"
            "–ò—Å–º–∏–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥:", reply_markup=ReplyKeyboardRemove()
        )
    return NAME


async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text.strip()
    lang = context.user_data["lang"]
    text = "Familyangizni kiriting:" if lang == "uz" else "–§–∞–º–∏–ª–∏—è–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥:"
    await update.message.reply_text(text)
    return SURNAME


async def get_surname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["surname"] = update.message.text.strip()
    lang = context.user_data["lang"]
    text = "Yoshingiz nechida?" if lang == "uz" else "–Å—à–∏–Ω–≥–∏–∑ –Ω–µ—á–∞–¥–∞?"
    await update.message.reply_text(text)
    return AGE


async def get_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["age"] = update.message.text.strip()
    lang = context.user_data["lang"]
    if lang == "uz":
        keyboard = [[KeyboardButton("Usta"), KeyboardButton("O‚Äòrganuvchi")]]
        text = "Lavozimingizni tanlang:"
    else:
        keyboard = [[KeyboardButton("–£—Å—Ç–∞"), KeyboardButton("–é—Ä–≥–∞–Ω—É–≤—á–∏")]]
        text = "–õ–∞–≤–æ–∑–∏–º–∏–Ω–≥–∏–∑–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:"
    await update.message.reply_text(text, reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True))
    return POSITION


async def get_position(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["position"] = update.message.text.strip()
    lang = context.user_data["lang"]
    if lang == "uz":
        viloyatlar = ["Farg‚Äòona", "Andijon", "Namangan"]
        text = "Qaysi viloyatda yashaysiz?"
    else:
        viloyatlar = ["–§–∞—Ä“ì–æ–Ω–∞", "–ê–Ω–¥–∏–∂–æ–Ω", "–ù–∞–º–∞–Ω–≥–∞–Ω"]
        text = "“ö–∞–π—Å–∏ –≤–∏–ª–æ—è—Ç–¥–∞ —è—à–∞–π—Å–∏–∑?"
    keyboard = [[v] for v in viloyatlar]
    await update.message.reply_text(text, reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True))
    return LOCATION


async def get_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["viloyat"] = update.message.text.strip()
    lang = context.user_data["lang"]
    # misol tumanlar
    if lang == "uz":
        tumanlar = {
            "farg‚Äòona": ["Farg‚Äòona shahar", "Marg‚Äòilon", "Qo‚Äòqon", "Oltiariq", "Rishton"],
            "andijon": ["Andijon shahar", "Asaka", "Shahrixon", "Xo‚Äòjaobod"],
            "namangan": ["Namangan shahar", "Chortoq", "Chust", "Uchqo‚Äòrg‚Äòon"]
        }
        text = "Shahar yoki tumanningizni tanlang:"
    else:
        tumanlar = {
            "—Ñ–∞—Ä“ì–æ–Ω–∞": ["–§–∞—Ä“ì–æ–Ω–∞ —à–∞“≥–∞—Ä", "–ú–∞—Ä“ì–∏–ª–æ–Ω", "“ö—û“õ–æ–Ω", "–û–ª—Ç–∏–∞—Ä–∏“õ", "–†–∏—à—Ç–æ–Ω"],
            "–∞–Ω–¥–∏–∂–æ–Ω": ["–ê–Ω–¥–∏–∂–æ–Ω —à–∞“≥–∞—Ä", "–ê—Å–∞–∫–∞", "–®–∞“≥—Ä–∏—Ö–æ–Ω", "–•—û–∂–∞–æ–±–æ–¥"],
            "–Ω–∞–º–∞–Ω–≥–∞–Ω": ["–ù–∞–º–∞–Ω–≥–∞–Ω —à–∞“≥–∞—Ä", "–ß–æ—Ä—Ç–æ“õ", "–ß—É—Å—Ç", "–£—á“õ—û—Ä“ì–æ–Ω"]
        }
        text = "–®–∞“≥–∞—Ä —ë–∫–∏ —Ç—É–º–∞–Ω–∏–Ω–≥–∏–∑–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:"
    key = context.user_data["viloyat"].lower()
    keyboard = [[t] for t in tumanlar.get(key, [])]
    await update.message.reply_text(text, reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True))
    return PHONE


async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["tuman"] = update.message.text.strip()
    lang = context.user_data["lang"]
    text = "Telefon raqamingizni yuboring yoki yozing:" if lang == "uz" else "–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ —é–±–æ—Ä–∏–Ω–≥ —ë–∫–∏ —ë–∑–∏–Ω–≥:"
    kb = [[KeyboardButton("üì± Raqamni yuborish", request_contact=True)]]
    await update.message.reply_text(text, reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True, resize_keyboard=True))
    return PREV_JOB


async def get_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["phone"] = update.message.contact.phone_number
    lang = context.user_data["lang"]
    text = "Oldin qayerda ishlagansiz? (Bo‚Äòlmasa 'yo‚Äòq' deb yozing)" if lang == "uz" else "–û–ª–¥–∏–Ω “õ–∞–µ—Ä–¥–∞ –∏—à–ª–∞–≥–∞–Ω—Å–∏–∑? (–ë—û–ª–º–∞—Å–∞ '–π—û“õ' –¥–µ–± —ë–∑–∏–Ω–≥)"
    await update.message.reply_text(text, reply_markup=ReplyKeyboardRemove())
    return PREV_JOB


async def get_prev_job(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["prev_job"] = update.message.text.strip()
    lang = context.user_data["lang"]
    text = "Oldingi ish joyingizdagi oyligingiz qancha edi?" if lang == "uz" else "–û–ª–¥–∏–Ω–≥–∏ –∏—à –∂–æ–π–∏–Ω–≥–∏–∑–¥–∞–≥–∏ –æ–π–ª–∏–≥–∏–Ω–≥–∏–∑ “õ–∞–Ω—á–∞ —ç–¥–∏?"
    await update.message.reply_text(text)
    return PREV_SALARY


async def get_prev_salary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["prev_salary"] = update.message.text.strip()
    lang = context.user_data["lang"]
    # oylik tanlov tugmalari
    oylik_opts = [
        ["1,000,000 so‚Äòm", "1,500,000 so‚Äòm"],
        ["2,000,000 so‚Äòm", "2,500,000 so‚Äòm"],
        ["3,000,000 so‚Äòm", "3,500,000 so‚Äòm"]
    ]
    text = "Hozir o‚Äòylayotgan oyligingiz qancha?" if lang == "uz" else "“≤–æ–∑–∏—Ä —û–π–ª–∞—ë—Ç–≥–∞–Ω –æ–π–ª–∏–≥–∏–Ω–≥–∏–∑ “õ–∞–Ω—á–∞?"
    await update.message.reply_text(text, reply_markup=ReplyKeyboardMarkup(oylik_opts, one_time_keyboard=True, resize_keyboard=True))
    return EXPECTED_SALARY


async def get_expected_salary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["expected_salary"] = update.message.text.strip()
    lang = context.user_data["lang"]
    if lang == "uz":
        kb = [[KeyboardButton("Ha"), KeyboardButton("Yo‚Äòq")]]
        text = "Og‚Äòir ishlarga tayyormisiz?"
    else:
        kb = [[KeyboardButton("“≤–∞"), KeyboardButton("–ô—û“õ")]]
        text = "–û“ì–∏—Ä –∏—à–ª–∞—Ä–≥–∞ —Ç–∞–π—ë—Ä–º–∏—Å–∏–∑?"
    await update.message.reply_text(text, reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True, resize_keyboard=True))
    return HARDWORK


async def get_hardwork(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["hardwork"] = update.message.text.strip()
    lang = context.user_data["lang"]
    if lang == "uz":
        kb = [[KeyboardButton("Ha"), KeyboardButton("Yo‚Äòq")]]
        text = "Matematikani bilasizmi? (qo‚Äòshish, ayrish, ko‚Äòpaytirish, bo‚Äòlish)"
    else:
        kb = [[KeyboardButton("“≤–∞"), KeyboardButton("–ô—û“õ")]]
        text = "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞–Ω–∏ –±–∏–ª–∞—Å–∏–∑–º–∏? (“õ—û—à–∏—à, –∞–π—Ä–∏—à, –∫—û–ø–∞–π—Ç–∏—Ä–∏—à, –±—û–ª–∏—à)"
    await update.message.reply_text(text, reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True, resize_keyboard=True))
    return MOTIVATION


async def get_math(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["math"] = update.message.text.strip()
    lang = context.user_data["lang"]
    text = "Nima uchun hunar o‚Äòrganmoqchisiz?" if lang == "uz" else "–ù–∏–º–∞ —É—á—É–Ω “≥—É–Ω–∞—Ä —û—Ä–≥–∞–Ω–º–æ“õ—á–∏—Å–∏–∑?"
    await update.message.reply_text(text)
    return START_DATE


async def get_motivation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["motivation"] = update.message.text.strip()
    lang = context.user_data["lang"]
    text = "Qachondan ish boshlay olasiz?" if lang == "uz" else "“ö–∞—á–æ–Ω–¥–∞–Ω –∏—à –±–æ—à–ª–∞–π –æ–ª–∞—Å–∏–∑?"
    await update.message.reply_text(text)
    return START_DATE


async def get_start_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["start_date"] = update.message.text.strip()
    data = context.user_data
    requests.post(SHEET_URL, json=data)
    lang = context.user_data["lang"]
    text = "‚úÖ Rahmat! Arizangiz qabul qilindi." if lang == "uz" else "‚úÖ –†–∞—Ö–º–∞—Ç! –ê—Ä–∏–∑–∞–Ω–≥–∏–∑ “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–¥–∏."
    await update.message.reply_text(text, reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Ariza bekor qilindi.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            LANGUAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_language)],
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            SURNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_surname)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_age)],
            POSITION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_position)],
            LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_location)],
            PHONE: [
                MessageHandler(filters.CONTACT, get_contact),
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)
            ],
            PREV_JOB: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_prev_job)],
            PREV_SALARY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_prev_salary)],
            EXPECTED_SALARY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_expected_salary)],
            HARDWORK: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_hardwork)],
            MATH: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_math)],
            MOTIVATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_motivation)],
            START_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_start_date)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv)
    app.run_polling()


if __name__ == "__main__":
    main()
